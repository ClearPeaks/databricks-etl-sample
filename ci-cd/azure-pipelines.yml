trigger:
  branches:
    include:
      - dev
      - pre
      - prod

variables:
  - group: databricks-multienv-variables  # Group containing environment variables for Databricks

stages:
- stage: Deploy
  displayName: 'Deploy to Databricks Environment'
  jobs:
    - job: DeployJob
      displayName: 'Deploy to the appropriate environment'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - script: |
            # Install Databricks CLI and jq
            sudo apt-get update
            sudo apt-get install -y jq
            pip install databricks-cli
          displayName: 'Install Databricks CLI and jq'

        - checkout: self

        # Set the environment-specific variables based on the branch
        - script: |
            echo "Current source branch: ${BUILD_SOURCEBRANCHNAME}"

            if [ "${BUILD_SOURCEBRANCHNAME}" == "dev" ]; then
              echo "Deploying to Dev environment"
              export DATABRICKS_HOST=${DATABRICKS_INSTANCES_DEV}
              export OAUTH_TOKEN1=${OAUTH_TOKEN_DEV}
            elif [ "${BUILD_SOURCEBRANCHNAME}" == "pre" ]; then
              echo "Deploying to Pre environment"
              export DATABRICKS_HOST=${DATABRICKS_INSTANCES_PRE}
              export OAUTH_TOKEN1=${OAUTH_TOKEN_PRE}
            elif [ "${BUILD_SOURCEBRANCHNAME}" == "prod" ]; then
              echo "Deploying to Prod environment"
              export DATABRICKS_HOST=${DATABRICKS_INSTANCES_PROD}
              export OAUTH_TOKEN1=${OAUTH_TOKEN}
            else
              echo "Branch not recognized. Exiting."
              exit 1
            fi

            echo "Databricks host set to: $DATABRICKS_HOST"
            echo "##vso[task.setvariable variable=DATABRICKS_HOST]$DATABRICKS_HOST"
          displayName: 'Set Databricks Host based on branch'

        - script: |
            # Authenticate using the OAuth token for Databricks CLI
            if [ "${BUILD_SOURCEBRANCHNAME}" == "dev" ]; then
              OAUTH_TOKEN1=${OAUTH_TOKEN_DEV}
            elif [ "${BUILD_SOURCEBRANCHNAME}" == "pre" ]; then
              OAUTH_TOKEN1=${OAUTH_TOKEN_PRE}
            elif [ "${BUILD_SOURCEBRANCHNAME}" == "prod" ]; then
              OAUTH_TOKEN1=${OAUTH_TOKEN}
            else
              echo "Branch not recognized. Exiting."
              exit 1
            fi
            echo $OAUTH_TOKEN1 > token-file
            echo "Authenticating Databricks CLI with host: $(DATABRICKS_HOST)"
            databricks configure --host $(DATABRICKS_HOST) --token-file token-file
          displayName: 'Configure Databricks CLI with OAuth Token'

        - script: |
            # Update Databricks repository to the current branch
            echo "Using Databricks host: $(DATABRICKS_HOST)"
            echo "Repo Path: ${REPO_PATH}"
            echo "Branch: ${BUILD_SOURCEBRANCHNAME}"
            
            databricks repos update --path ${REPO_PATH} --branch ${BUILD_SOURCEBRANCHNAME}
          displayName: 'Update Databricks Git Folder'
  
      # Condition to ensure this job only runs for dev, pre, or prod branches
      condition: |
        or(
          and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev')),
          and(succeeded(), eq(variables['Build.SourceBranchName'], 'pre')),
          and(succeeded(), eq(variables['Build.SourceBranchName'], 'prod'))
        )
